#version 330 core

out vec4 FragColor;

in vec3 normal;
in vec3 fragPos;
in vec2 texCoords;

struct Light {
    vec3 direction;
    vec3 position;
    float innerCutoff;
    float outerCutoff;
  
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;

    float constant;
    float linear;
    float quadratic;
};

uniform Light uLight; 

struct Material 
{
    sampler2D diffuse;
    sampler2D specular;
    float shininess;
};

uniform Material uMaterial;
uniform vec3 uViewPosition;

void main()
{
    float distance = length(uLight.position - fragPos);
    float attenuation = 1.0f / (uLight.constant + uLight.linear * distance + uLight.quadratic * (distance * distance));

    vec3 lightDir = normalize(uLight.position - fragPos);
    float theta = dot(normalize(uLight.direction), -lightDir);
    float intensity = clamp((theta - uLight.outerCutoff) / (uLight.innerCutoff - uLight.outerCutoff), 0.0, 1.0);

    vec3 ambientLightning = uLight.ambient * vec3(texture(uMaterial.diffuse, texCoords));

    vec3 norm = normalize(normal);
    float diffuseStrength = max(dot(lightDir, norm), 0.0);
    vec3 diffuseLightning = diffuseStrength * uLight.diffuse * vec3(texture(uMaterial.diffuse, texCoords));

    vec3 viewDir = normalize(uViewPosition - fragPos);
    vec3 reflectDir = reflect(-lightDir, norm);
    float specularStrength = pow(max(dot(viewDir, reflectDir), 0.0f), uMaterial.shininess);
    vec3 specularLightning = specularStrength * uLight.specular * vec3(texture(uMaterial.specular, texCoords));

    diffuseLightning *= intensity;
    specularLightning *= intensity;

    vec3 resultColor = attenuation * (ambientLightning + diffuseLightning + specularLightning);

    FragColor = vec4(resultColor, 1.0);
}







/*#version 330 core

out vec4 FragColor;

in vec3 normal;
in vec3 fragPos;
in vec2 texCoords;

struct Light {
    vec3 position;
  
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;

    float constant;
    float linear;
    float quadratic;
};

uniform Light uLight; 

struct Material 
{
    sampler2D diffuse;
    sampler2D specular;
    float shininess;
};

uniform Material uMaterial;
uniform vec3 uViewPosition;

void main()
{
    
    vec3 ambientLightning = uLight.ambient * vec3(texture(uMaterial.diffuse, texCoords));

    vec3 norm = normalize(normal);
    vec3 lightDir = normalize(uLight.position - fragPos);
    float diffuseStrength = max(dot(lightDir, norm), 0.0);
    vec3 diffuseLightning = diffuseStrength * uLight.diffuse * vec3(texture(uMaterial.diffuse, texCoords));

    vec3 viewDir = normalize(uViewPosition - fragPos);
    vec3 reflectDir = reflect(-lightDir, norm);
    float specularStrength = pow(max(dot(viewDir, reflectDir), 0.0f), uMaterial.shininess);
    vec3 specularLightning = specularStrength * uLight.specular * vec3(texture(uMaterial.specular, texCoords));

    float distance = length(uLight.position - fragPos);
    float attenuation = 1.0f / (uLight.constant + uLight.linear * distance + uLight.quadratic * (distance * distance));
    vec3 resultColor = attenuation * (ambientLightning + diffuseLightning + specularLightning);

    FragColor = vec4(resultColor, 1.0);
}*/